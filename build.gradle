buildscript {
    ext {
        verifier_version = "1.2.3.RELEASE"
    }

    dependencies {
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.20"
        classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:${verifier_version}"
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.3.RELEASE"
    id 'org.springframework.boot' version "1.5.9.RELEASE"
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'jacoco'


if (buildStage()) {
    apply plugin: "com.gorylenko.gradle-git-properties"
    apply from: "${rootProject.projectDir}/gradle/checkstyle.gradle"
    apply from: "${rootProject.projectDir}/gradle/findbugs.gradle"
    apply from: "${rootProject.projectDir}/gradle/git-hooks.gradle"
    apply from: "${rootProject.projectDir}/gradle/build-version.gradle"
    apply from: "${rootProject.projectDir}/gradle/boot-info.gradle"
    apply from: "${rootProject.projectDir}/gradle/maven-publish.gradle"
    apply from: "${rootProject.projectDir}/gradle/contract.gradle"
}

group = 'com.github.hippoom'

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) { options.encoding = 'utf-8' }


repositories {
    mavenLocal()
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "io.spring.platform:platform-bom:Brussels-SR5"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Dalston.SR4"
        mavenBom "org.springframework.cloud:spring-cloud-contract-dependencies:${verifier_version}"
    }

    dependencies {
        dependency "org.projectlombok:lombok:1.16.18"
        dependency "com.google.code.findbugs:annotations:3.0.1"
    }
}

dependencies {
    compileOnly "org.projectlombok:lombok"
    testCompileOnly "org.projectlombok:lombok"
    compileOnly 'com.google.code.findbugs:annotations'
    testCompileOnly 'com.google.code.findbugs:annotations'

    // web
    compile "org.springframework.boot:spring-boot-starter-web"
    compile("org.springframework.boot:spring-boot-starter-hateoas")
    compile("org.springframework.boot:spring-boot-starter-actuator")

    // security
//    compile "org.springframework.boot:spring-boot-starter-security"
//    testCompile group: 'org.springframework.security', name: 'spring-security-test', version: '4.2.3.RELEASE'

    // tests frameworks
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.hamcrest:hamcrest-all:1.3")
    testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.12'
    // example with adding Spock core and Spock Spring
    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4'
    testCompile group: 'net.bytebuddy', name: 'byte-buddy', version: '1.7.9'

    // test helper
    testCompile group: 'com.github.hippoom', name: 'test-data-builder', version: '0.2.0'

    testCompile 'org.springframework.cloud:spring-cloud-starter-contract-verifier'

}

test {
    exclude '**/deployment/*'
    exclude '**/specs/*'
    exclude '**/*LearningTest*'
    exclude '**/*Console*'
}

jacoco {
    toolVersion = "0.8.0"
}

jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/model/**/Q**'])
        })
    }
}

test.finalizedBy([jacocoTestReport])

task deploymentTest(type: Test) {
    // this task will be executed in isolation since all artifacts have been built and deployed
    dependsOn = []

    include '**/deployment/*'

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    outputs.upToDateWhen { false }//force to always rerun

    reports.html.destination = file("$buildDir/reports/tests/deployment")
}

idea {
    project {

        jdkName = '1.8'
        languageLevel = '1.8'

        ipr.withXml { xmlFile ->
            // setup Git root
            xmlFile.asNode().component.find { it.@name == 'VcsDirectoryMappings' }.replaceNode {
                component(name: 'VcsDirectoryMappings') {
                    mapping(directory: "", vcs: "Git")
                    mapping(directory: "\$PROJECT_DIR\$", vcs: 'Git')
                }
            }

            // setup annotationProcessing for lombok
            xmlFile.asNode().component.find {
                it.@name == 'CompilerConfiguration'
            }.annotationProcessing.replaceNode {
                annotationProcessing() {
                    profile(default: "true", name: "Default", enabled: 'true')
                }
            }
        }
    }

    module {
        scopes.COMPILE.plus += [configurations.compileOnly]
        sourceDirs += file('src/querydsl/java')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2.1'
}

jar {
    archiveName = "${rootProject.name}.jar"
}

springBoot {
    executable = true
}

def buildStage() {
    String isBuildStage = System.getProperty("buildStage")
    print "property isBuildStage=${isBuildStage}"
    def b = isBuildStage == null || Boolean.valueOf(isBuildStage)
    print "final isBuildStage=${b}"
    return b
}

//afterEvaluate {
//    jacocoTestReport {
//        classDirectories = files(classDirectories.files.collect {
//            fileTree(dir: it, exclude: '**/model/**/Q**')
//        })
////        def coverageSourceDirs = ['src/main/java']
////        sourceDirectories = files(coverageSourceDirs)
////        classDirectories = fileTree(
////            dir: "${project.buildDir}/classes/java/main",
////            excludes: [
////                '**/model/**/Q**'
////            ]
////        )
//    }
//}
